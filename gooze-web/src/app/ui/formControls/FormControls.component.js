import React from "react";import {Observable} from "rxjs/Observable";import {rxDom, empty, fp, ensure} from "utils";import PropTypes from "prop-types";import "./FormControls.styles.scss";export {TextInput, NumberInput, EmailInput, PasswordInput, SearchInput, ToggleInput, RadioGroup, CheckboxGroup};function TextInput({...args}) {    return (        <FormInput            type="text" {...args}        />    );}function NumberInput({...args}) {    return (        <FormInput            type="number" {...args}        />    );}function EmailInput({...args}) {    return (        <FormInput            type="email" {...args}        />    );}function PasswordInput({...args}) {    return (        <FormInput            type="password" {...args}        />    );}function SearchInput({...args}) {    return (        <FormInput            type="search" {...args}        />    );}function ToggleInput({label, checked$, helpText, className, onChange, disabled, error$, labelToLeft}) {    const helpText$ = (        error$.map(            (obj) => {                let result = {                    class: "",                    message: helpText                };                if (obj !== undefined && obj.message !== undefined) {                    result = {                        class: `lv-input-${obj.type.toLowerCase()}`,                        message: obj.message                    };                }                return result;            })            .startWith({class: "", message: helpText})    );    return (        <rxDom.div className={helpText$.pluck("class").map(fp.prefixWith(`lv-form-control lv-input-selection ${className} ${labelToLeft ? "left-label" : ""}`))}>            <label className="lv-input-label-wrapper lv-input-toggle">                <rxDom.input type="checkbox" className="lv-form-input " checked={checked$} onChange={onChange} disabled={disabled} />                <span className="lv-input-selection-label">{label}</span>            </label>            <rxDom.div className="lv-help-text">{helpText$.pluck("message")}</rxDom.div>        </rxDom.div>    );}function RadioGroup({items$, error$, groupName, onItemSelect, extractLabel, helpText, className, disabled, labelToLeft}) {    return SelectionGroup({items$, error$, groupName, onItemSelect, helpText, extractLabel, className, disabled, labelToLeft, radio: true});}function CheckboxGroup({items$, error$, groupName, onItemSelect, extractLabel, helpText, className, disabled, labelToLeft}) {    return SelectionGroup({items$, error$, groupName, onItemSelect, helpText, extractLabel, className, disabled, labelToLeft, radio: false});}function SelectionGroup({items$, error$, groupName, onItemSelect, extractLabel, helpText, className, disabled, labelToLeft, radio}) {    const helpText$ = (        error$.map(            (obj) => {                let result = {                    class: "",                    message: helpText                };                if (obj !== undefined && obj.message !== undefined) {                    result = {                        class: `lv-input-${obj.type.toLowerCase()}`,                        message: obj.message                    };                }                return result;            }            )            .startWith({class: "", message: helpText})    );    className = ensure.string(className);    const itemsList$ = items$.map((items) => items.map((item, index) => {        return (            <rxDom.div key={index} className={`lv-form-control lv-input-selection ${className} ${labelToLeft ? "left-label" : ""}`}>                <label className={`lv-input-label-wrapper lv-input-${radio ? "radio" : "checkbox"}`}>                    <rxDom.input type={radio ? "radio" : "checkbox"} className="lv-form-input" name={groupName} onChange={onItemSelect} disabled={disabled} />                    <span className="lv-input-selection-label">{extractLabel(item)}</span>                </label>            </rxDom.div>        )    }));    return (        <rxDom.div className={helpText$.pluck("class").map(fp.prefixWith(`lv-selection-group lv-selection-group-${radio ? "radio" : "checkbox"} `))}>            <rxDom.div className="lv-selection-group-items">                {itemsList$}            </rxDom.div>            <rxDom.div className="lv-help-text">{helpText$.pluck("message")}</rxDom.div>        </rxDom.div>    );}function FormInput({type, label, value$, helpText, className, onChange, disabled, error$, onInit, onDestroy}) {    const helpText$ = (        error$.map(            (obj) => {                let result = {                    class: "",                    message: helpText                };                if (obj !== undefined && obj.message !== undefined) {                    result = {                        class: `lv-input-${obj.type.toLowerCase()}`,                        message: obj.message                    };                }                return result;            }        )        .startWith({class: "", message: helpText})    );    return (        <rxDom.div className={helpText$.pluck("class").map(fp.prefixWith(`lv-form-control ${className} `))}>            <rxDom.input type={type} className={fp.prefixWith("w-100 lv-form-input lv-input-")(type)} value={value$} onChange={onChange} disabled={disabled} required ref={handleRef}/>            <label className="lv-input-placeholder">{label}</label>            <rxDom.div className="lv-help-text">{helpText$.pluck("message")}</rxDom.div>        </rxDom.div>    );    function handleRef(component) {        if (component !== null) {            onInit(component.element.current);        } else {            onDestroy();        }    }}FormInput.defaultProps = {    helpText: "",    className: "",    onChange: empty,    disabled: false,    onInit: empty,    onDestroy: empty};FormInput.propTypes = {    type: PropTypes.oneOf(["search", "number", "text", "email", "password"]).isRequired,    label: PropTypes.string.isRequired,    value$: PropTypes.instanceOf(Observable).isRequired,    error$: PropTypes.instanceOf(Observable).isRequired,    helpText: PropTypes.string,    className: PropTypes.string,    onChange: PropTypes.func,    disabled: PropTypes.bool,    onInit: PropTypes.func,    onDestroy: PropTypes.func};ToggleInput.defaultProps = {    helpText: "",    className: "",    onChange: empty,    disabled: false,    labelToLeft: false};ToggleInput.propTypes = {    label: PropTypes.string.isRequired,    checked$: PropTypes.instanceOf(Observable).isRequired,    error$: PropTypes.instanceOf(Observable).isRequired,    helpText: PropTypes.string,    className: PropTypes.string,    onChange: PropTypes.func,    disabled: PropTypes.bool,    labelToLeft: PropTypes.bool};RadioGroup.propTypes = CheckboxGroup.propTypes = SelectionGroup.defaultProps = {    helpText: "",    className: "",    disabled: false,    labelToLeft: false,    radio: true};RadioGroup.propTypes = CheckboxGroup.propTypes = SelectionGroup.propTypes = {    items$: PropTypes.instanceOf(Observable).isRequired,    error$: PropTypes.instanceOf(Observable).isRequired,    groupName: PropTypes.string.isRequired,    onItemSelect: PropTypes.func.isRequired,    extractLabel: PropTypes.func.isRequired,    helpText: PropTypes.string,    className: PropTypes.string,    disabled: PropTypes.bool,    labelToLeft: PropTypes.bool,    radio: PropTypes.bool};